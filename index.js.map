{"mappings":"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","sources":["server.js","app.js","routes/tourRoutes.js","controllers/tourController.js","models/disneyModel.js","utils/appError.js","utils/catchAsync.js","controllers/handleFactory.js","utils/apiFeatures.js","controllers/errorController.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst dotenv = require('dotenv');\n// Unhandled Rejections is for example for something that doesn't exist in the code.\nprocess.on('uncaughtException', (err) => {\n  console.log('UNCAUGHT EXCEPTION! Shutting down');\n  console.log({ name: err.name, message: err.message, err });\n  process.exit(1);\n});\n\nconst app = require('./app');\n\ndotenv.config({\n  path: './config.env',\n});\n\nconst DB = process.env.DATABASE.replace(\n  '<PASSWORD>',\n  `${process.env.DATABASE_PASSWORD}`,\n);\n\nmongoose.connect(DB).then(() => {\n  console.log('DB connection successfull!');\n});\n\n// 4 Start server\nconst port = process.env.PORT || 3000;\n\nconst server = app.listen(port, () => {\n  console.log(`listening on port ${port}`);\n});\n\n// Unhandled Rejections is for example for password mongodb incorrectly.\nprocess.on('unhandledRejection', (err) => {\n  console.log('UNHANDLED REJECTION! Shutting down');\n  console.log({ name: err.name, message: err.message, err });\n  server.close();\n  process.exit(1);\n});\n","const express = require('express');\n// morgan helps to create logs for the app\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\nconst helmet = require('helmet');\n\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst cors = require('cors');\n\nconst app = express();\n\nconst tourRouter = require('./routes/tourRoutes');\n\nconst AppError = require('./utils/appError');\nconst errorController = require('./controllers/errorController');\n\n// 1 GLOBAL Middlewares\n// Security HTTP headers\napp.use(helmet());\n\n// Development loggin\nif (process.env.NODE_ENV !== 'production') {\n  app.use(morgan('dev'));\n}\n\n// Limit requests from same API\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000, // 1 hour\n  message: 'Too many requests from this IP, please try again in an hour.',\n});\n\napp.use('/api', limiter);\n\n// Body parser, reading data from body into req.body object\napp.use(express.json({ limit: '10kb' }));\n\n// data sanitization against no SQL query injection\napp.use(mongoSanitize());\n\n// Data sanitization against XSS\napp.use(xss());\n\n// Prevent parameter pollution\napp.use(\n  hpp({\n    whitelist: [\n      'duration',\n      'ratingsQuantity',\n      'ratingsAverage',\n      'maxGroupSize',\n      'difficulty',\n      'price',\n    ],\n  }),\n);\n// Test middleware\napp.use((req, res, next) => {\n  req.requestTime = Date.now().toString();\n  next();\n});\nconst options = {\n  origin: 'http://localhost:4321',\n};\napp.use(cors(options));\n// 2 routes\napp.use('/api/v1/disney', tourRouter);\n\n// Error handling middleware 404\napp.all('*', (req, res, next) => {\n  next(new AppError(`Can't find ${req.originalUrl} on this server`, 404));\n});\n\napp.use(errorController);\nmodule.exports = app;\n","const express = require('express');\nconst {\n  getAllTours,\n  createTour,\n  getDistances,\n} = require('../controllers/tourController');\n\n// const { createReview } = require('../controllers/reviewController');\n\nconst router = express.Router();\n\nrouter.route('/').get(getAllTours).post(createTour);\n\nrouter.route('/distances/:latLng/unit/:unit').get(getDistances);\n\nmodule.exports = router;\n","const Tour = require('../models/disneyModel');\nconst AppError = require('../utils/appError');\nconst catchAsync = require('../utils/catchAsync');\nconst {\n  deleteOne,\n  updateOne,\n  createOne,\n  getOne,\n  getAll,\n} = require('./handleFactory');\n\nexports.aliasTopTours = (req, res, next) => {\n  req.query.limit = '5';\n  req.query.sort = '-ratingsAverage,ratingsAverage';\n  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';\n  next();\n};\n\nexports.createTour = createOne(Tour);\nexports.editTour = updateOne(Tour);\nexports.removeTour = deleteOne(Tour);\n\nexports.getAllTours = getAll(Tour);\nexports.getTour = getOne(Tour, { path: 'reviews' });\n\n// e.g /v1/tours/distances/34.074052985283764,-118.40064801489154/unit/mi\nexports.getDistances = catchAsync(async (req, res, next) => {\n  const { latLng, unit } = req.params;\n  // good approach to destructure an array\n  const [lat, lng] = latLng.split(',');\n  const multiplier = unit === 'mi' ? 0.000621371 : 0.001;\n  if (!lat || !lng) {\n    next(\n      new AppError(\n        400,\n        'Please provide a latitude and longitude in the format lat,lng.',\n      ),\n    );\n  }\n  const distances = await Tour.aggregate([\n    {\n      $geoNear: {\n        near: {\n          type: 'Point',\n          coordinates: [lng * 1, lat * 1],\n        },\n        distanceField: 'distance',\n        distanceMultiplier: multiplier,\n      },\n    },\n    {\n      $project: {\n        distance: 1,\n        name: 1,\n        resort: 1,\n        city: 1,\n        country: 1,\n        'location.coordinates': 1,\n        images: 1,\n        url: 1,\n      },\n    },\n  ]);\n\n  res.status(200).json({\n    status: 'success',\n    data: {\n      data: distances,\n    },\n  });\n});\n","const mongoose = require('mongoose');\n// const validator = require('validator');\n\nconst tourSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: [true, 'A tour must have a name'],\n      unique: true,\n      trim: true,\n      maxLength: [\n        255,\n        'A tour name must have less or equal than 55 characters',\n      ],\n      minLength: [2, 'A tour name must have less than 2 characters'],\n    },\n    resort: {\n      type: String,\n      required: [true, 'A tour must have a resort'],\n      trim: true,\n      maxLength: [\n        255,\n        'A tour resort must have less or equal than 55 characters',\n      ],\n      minLength: [2, 'A tour resort must have less than 2 characters'],\n    },\n    city: {\n      type: String,\n      required: [true, 'A tour must have a city'],\n      trim: true,\n      maxLength: [\n        255,\n        'A tour city must have less or equal than 55 characters',\n      ],\n      minLength: [2, 'A tour city must have less than 2 characters'],\n    },\n    country: {\n      type: String,\n      required: [true, 'A tour must have a country'],\n      trim: true,\n      maxLength: [\n        255,\n        'A tour country must have less or equal than 55 characters',\n      ],\n      minLength: [2, 'A tour country must have less than 2 characters'],\n    },\n    location: {\n      // GeoJSON\n      type: {\n        type: String,\n        default: 'Point',\n        enum: ['Point'],\n      },\n      coordinates: [Number],\n    },\n    url: {\n      type: String,\n      require: [true, 'Tour must have an url'],\n    },\n    images: {\n      type: [String],\n      required: [true, 'Assign at least an image to the tour'],\n    },\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n  },\n);\n\n// 2dsphere indexes support geospatial queries on an earth-like sphere.\ntourSchema.index({ location: '2dsphere' });\n\n// GUIDES Embbeding approach\n// tourSchema.pre('save', async function (next) {\n//   const guidesPromises = this.guides.map(async (id) => await User.findById(id));\n//   this.guides = await Promise.all(guidesPromises);\n//   next();\n// });\n\n// post save\n// tourSchema.post('save', function (next) {\n//   next();\n// })\n\n// pre ---> save ---> post\n//  https://mongoosejs.com/docs/middleware.html\n\n// QUERY MIDDLEWARE\n\n// AGGREGATION MIDDLEWARE\n// aggregation is the event when you use aggregation filters\n// tourSchema.pre('aggregate', function (next) {\n//   this.pipeline().unshift({\n//     $match: { secretTour: { $ne: true } },\n//   });\n//   next();\n// });\n\nconst Tour = mongoose.model('Tour', tourSchema);\n\n// const testTour = new Tour({\n//   name: 'Test Tour',\n//   rating: 4.7,\n//   price: 299,\n// });\n\n// testTour\n//   .save()\n//   .then((doc) => {\n//     console.log(doc);\n//   })\n//   .catch((err) => {\n//     console.log('ERROR', err);\n//   });\n\nmodule.exports = Tour;\n","class AppError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.statusCode = statusCode;\n    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = AppError;\n","module.exports = (fn) => (req, res, next) => {\n  fn(req, res, next).catch(next);\n};\n","const catchAsync = require('../utils/catchAsync');\nconst AppError = require('../utils/appError');\nconst APIFeatures = require('../utils/apiFeatures');\n\nexports.deleteOne = (Model) =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.findByIdAndDelete(req.params.id);\n    if (!doc)\n      return next(new AppError('No document founded with that Id', 404));\n    res.status(204).json({\n      status: 'success',\n      requestedAt: req.requestTime,\n    });\n  });\n\nexports.updateOne = (Model) =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n      runValidators: true,\n    });\n    if (!doc)\n      return next(new AppError('No document founded with that Id', 404));\n    res.status(200).json({\n      status: 'success',\n      data: {\n        data: doc,\n      },\n      requestedAt: req.requestTime,\n    });\n  });\nexports.createOne = (Model) =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.create(req.body);\n    if (!doc)\n      return next(new AppError('No document founded with that Id', 404));\n    res.status(201).json({\n      status: 'success',\n      data: doc,\n    });\n  });\n\nexports.getOne = (Model, popOptions) =>\n  catchAsync(async (req, res, next) => {\n    let query = Model.findById(req.params.id);\n    // add pop options if needed\n    if (popOptions) query = query.populate(popOptions);\n    const doc = await query;\n\n    if (!doc) {\n      return next(new AppError('No document found with that Id', 404));\n    }\n    res.status(200).json({\n      status: 'success',\n      data: {\n        data: doc,\n      },\n    });\n  });\n\nexports.getAll = (Model) =>\n  catchAsync(async (req, res, next) => {\n    // Allowed nested routes GET reviews on tour (hack)\n    let filter = {};\n    if (req.params.tourId) filter = { tour: req.params.tourId };\n    //Execute the query\n    const features = new APIFeatures(Model.find(filter), req.query)\n      .filter()\n      .sorting()\n      .limitFields()\n      .paginate();\n    // explain\n    // const doc = await features.query.explain();\n    const doc = await features.query;\n\n    if (!doc) {\n      return next(new AppError('No documents found', 404));\n    }\n\n    res.status(200).json({\n      status: 'success',\n      data: { doc },\n      length: doc.length,\n      requestedAt: req.requestTime,\n    });\n  });\n","class APIFeatures {\n  constructor(query, queryString) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filter() {\n    // Build query\n    const queryObj = { ...this.queryString };\n    const excludedFields = ['page', 'sort', 'limit', 'fields'];\n    excludedFields.forEach((field) => delete queryObj[field]);\n\n    // 2) advanced filtering\n    let queryStr = JSON.stringify(queryObj);\n\n    queryStr = queryStr.replace(/\\b(gte|gt|lte|lt)\\b/g, (match) => `$${match}`);\n    // gte, gt , lte, lt\n    // const query = Tour.find(JSON.parse(queryStr));\n    this.query = this.query.find(JSON.parse(queryStr));\n    return this;\n  }\n\n  sorting() {\n    if (this.queryString.sort) {\n      const sortBy = this.queryString.sort.split(',').join(' ');\n      this.query = this.query.sort(sortBy);\n    } else {\n      this.query = this.query.sort('-createdAt');\n    }\n    return this;\n  }\n\n  limitFields() {\n    if (this.queryString.fields) {\n      const fields = this.queryString.fields.split(',').join(' ');\n      this.query = this.query.select(fields);\n    } else {\n      this.query = this.query.select('-__v');\n    }\n    return this;\n  }\n\n  paginate() {\n    const page = this.queryString.page * 1 || 1;\n    const limit = this.queryString.limit * 1 || 100;\n\n    const skip = (page - 1) * limit;\n\n    this.query = this.query.skip(skip).limit(limit);\n\n    return this;\n  }\n}\nmodule.exports = APIFeatures;\n","const AppError = require('../utils/appError');\n\nconst handleCastErrorDB = (err, next) => {\n  const message = `Invalid ${err.path} : ${err.value}.`;\n  return new AppError(message, 400);\n};\nconst handleDuplicateFieldsDB = (err) => {\n  const value = Object.values(err.keyValue)[0];\n  const message = `Duplicate field value: ${value}. Use another value.`;\n  return new AppError(message, 400);\n};\nconst handleValidationErrorDB = (err) => {\n  const errors = Object.values(err.errors).map((el) => el.message);\n  const message = `Invalid input data. ${errors.join('. ')}`;\n  return new AppError(message, 400);\n};\n\nconst handleJWTErrorDB = () =>\n  new AppError('Invalid Token. Please provide a valid token', 401);\n\nmodule.exports = (err, req, res, next) => {\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || 'error';\n  let error = Object.create(err) || err;\n\n  if (error.name === 'CastError') error = handleCastErrorDB(error);\n  if (error.code === 11000) error = handleDuplicateFieldsDB(error);\n  if (error.name === 'ValidationError') error = handleValidationErrorDB(error);\n  if (error.name === 'JsonWebTokenError') error = handleJWTErrorDB();\n\n  res.status(error.statusCode).json({\n    status: error.status,\n    message: error.message,\n    err: process.env.NODE_ENV !== 'production' ? error : null,\n    stack: process.env.NODE_ENV !== 'production' ? error.stack : null,\n  });\n};\n"],"names":[],"version":3,"file":"index.js.map"}